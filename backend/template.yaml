AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Resumify - Serverless Resume Parser & AI Job Matcher (ap-south-1)

Globals:
  Function:
    Timeout: 30
    Runtime: python3.10
    Environment:
      Variables:
        CANDIDATES_TABLE: !Ref CandidatesTable
        ANALYSES_TABLE: !Ref AnalysesTable
        JOBS_TABLE: !Ref JobsTable
        MATCHES_TABLE: !Ref MatchesTable
        RESUMES_BUCKET: !Ref ResumesBucket
        # Enhanced monitoring and reliability settings
        ENABLE_ENHANCED_MONITORING: "true"
        ENABLE_CIRCUIT_BREAKER: "true"
        LOG_LEVEL: "INFO"
        MONITORING_NAMESPACE: "Resumify/Enhanced"
        # Timeout configurations for different operations
        DATABASE_TIMEOUT: "10"
        S3_TIMEOUT: "15"
        TEXTRACT_TIMEOUT: "300"
        EXTERNAL_API_TIMEOUT: "30"

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]

Resources:
  ### S3 Bucket for Resumes ###
  ResumesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "resumify-resumes-${AWS::AccountId}-ap-south-1-${Environment}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  ### DynamoDB Tables ###
  CandidatesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "Resumify_Candidates_${Environment}"
      AttributeDefinitions:
        - AttributeName: candidateId
          AttributeType: S
      KeySchema:
        - AttributeName: candidateId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  AnalysesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "Resumify_Analyses_${Environment}"
      AttributeDefinitions:
        - AttributeName: analysisId
          AttributeType: S
        - AttributeName: candidateId
          AttributeType: S
      KeySchema:
        - AttributeName: analysisId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: candidateId-index
          KeySchema:
            - AttributeName: candidateId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  JobsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "Resumify_Jobs_${Environment}"
      AttributeDefinitions:
        - AttributeName: jobId
          AttributeType: S
      KeySchema:
        - AttributeName: jobId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  MatchesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "Resumify_Matches_${Environment}"
      AttributeDefinitions:
        - AttributeName: candidateId
          AttributeType: S
        - AttributeName: jobId
          AttributeType: S
      KeySchema:
        - AttributeName: candidateId
          KeyType: HASH
        - AttributeName: jobId
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  ### API Gateway ###
  ResumifyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"

  ### Lambda Functions ###
  UploadHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/upload_handler/
      Handler: app.lambda_handler
      Timeout: 60
      MemorySize: 512
      Environment:
        Variables:
          CANDIDATES_TABLE: !Ref CandidatesTable
          ANALYSES_TABLE: !Ref AnalysesTable
          RESUMES_BUCKET: !Ref ResumesBucket
          DOCX_WORKER_FUNCTION: !Ref DocxTxtWorkerFunction
          NLP_PROCESSOR_FUNCTION: !Ref NlpHandlerFunction
      Events:
        UploadApi:
          Type: Api
          Properties:
            RestApiId: !Ref ResumifyApi
            Path: /upload
            Method: post
      Policies:
        - S3WritePolicy:
            BucketName: !Ref ResumesBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref CandidatesTable
        - DynamoDBCrudPolicy:
            TableName: !Ref AnalysesTable
        - Statement:
            - Effect: Allow
              Action:
                - textract:StartDocumentTextDetection
              Resource: "*"
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource: !GetAtt DocxTxtWorkerFunction.Arn
            - Effect: Allow
              Action:
                - cloudwatch:PutMetricData
              Resource: "*"

  DocxTxtWorkerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/docx_txt_worker/
      Handler: app.lambda_handler
      Timeout: 300
      MemorySize: 1024
      Environment:
        Variables:
          CANDIDATES_TABLE: !Ref CandidatesTable
          ANALYSES_TABLE: !Ref AnalysesTable
          RESUMES_BUCKET: !Ref ResumesBucket
          NLP_HANDLER_FUNCTION: !Ref NlpHandlerFunction
      Layers:
        - !Ref AntiwordLayer
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref ResumesBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref AnalysesTable
        - DynamoDBCrudPolicy:
            TableName: !Ref CandidatesTable
        - Statement:
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource: !GetAtt NlpHandlerFunction.Arn

  TextractResultHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/textract_result_handler/
      Handler: app.lambda_handler
      Timeout: 300
      MemorySize: 512
      Environment:
        Variables:
          ANALYSES_TABLE: !Ref AnalysesTable
          CANDIDATES_TABLE: !Ref CandidatesTable
          RESUMES_BUCKET: !Ref ResumesBucket
          NLP_HANDLER_FUNCTION: !Ref NlpHandlerFunction
      Events:
        TextractSNSEvent:
          Type: SNS
          Properties:
            Topic: !Ref TextractTopic
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AnalysesTable
        - DynamoDBCrudPolicy:
            TableName: !Ref CandidatesTable
        - Statement:
            - Effect: Allow
              Action:
                - textract:GetDocumentTextDetection
              Resource: "*"
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource: !GetAtt NlpHandlerFunction.Arn

  NlpHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/nlp_handler/
      Handler: app.lambda_handler
      Timeout: 300
      MemorySize: 1024
      Environment:
        Variables:
          ANALYSES_TABLE: !Ref AnalysesTable
      Events:
        AnalyzeApi:
          Type: Api
          Properties:
            RestApiId: !Ref ResumifyApi
            Path: /analyze
            Method: post
        OptionsAnalyze:
          Type: Api
          Properties:
            RestApiId: !Ref ResumifyApi
            Path: /analyze
            Method: options
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AnalysesTable
        - Statement:
            - Effect: Allow
              Action:
                - comprehend:DetectEntities
                - comprehend:DetectKeyPhrases
                - comprehend:DetectSentiment
              Resource: "*"

  MatchingHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/matches_handler/
      Handler: app.lambda_handler
      Timeout: 60
      MemorySize: 512
      Environment:
        Variables:
          ANALYSES_TABLE: !Ref AnalysesTable
          JOBS_TABLE: !Ref JobsTable
          MATCHES_TABLE: !Ref MatchesTable
      Events:
        MatchesApi:
          Type: Api
          Properties:
            RestApiId: !Ref ResumifyApi
            Path: /matches
            Method: get
        OptionsMatches:
          Type: Api
          Properties:
            RestApiId: !Ref ResumifyApi
            Path: /matches
            Method: options
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref AnalysesTable
        - DynamoDBReadPolicy:
            TableName: !Ref JobsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref MatchesTable
        - Statement:
            - Effect: Allow
              Action:
                - cloudwatch:PutMetricData
              Resource: "*"

  JobsHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/jobs_handler/
      Handler: app.lambda_handler
      Timeout: 45
      MemorySize: 256
      Environment:
        Variables:
          JOBS_TABLE: !Ref JobsTable
      Events:
        GetJobs:
          Type: Api
          Properties:
            RestApiId: !Ref ResumifyApi
            Path: /jobs
            Method: get
        PostJobs:
          Type: Api
          Properties:
            RestApiId: !Ref ResumifyApi
            Path: /jobs
            Method: post
        PutJob:
          Type: Api
          Properties:
            RestApiId: !Ref ResumifyApi
            Path: /jobs/{jobId}
            Method: put
        DeleteJob:
          Type: Api
          Properties:
            RestApiId: !Ref ResumifyApi
            Path: /jobs/{jobId}
            Method: delete
        OptionsJobs:
          Type: Api
          Properties:
            RestApiId: !Ref ResumifyApi
            Path: /jobs
            Method: options
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref JobsTable
        - Statement:
            - Effect: Allow
              Action:
                - cloudwatch:PutMetricData
              Resource: "*"

  AnalysisHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/analysis_handler/
      Handler: app.lambda_handler
      Timeout: 45
      MemorySize: 256
      Environment:
        Variables:
          CANDIDATES_TABLE: !Ref CandidatesTable
          ANALYSES_TABLE: !Ref AnalysesTable
      Events:
        GetAnalysis:
          Type: Api
          Properties:
            RestApiId: !Ref ResumifyApi
            Path: /analysis
            Method: get
        OptionsAnalysis:
          Type: Api
          Properties:
            RestApiId: !Ref ResumifyApi
            Path: /analysis
            Method: options
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref AnalysesTable
        - DynamoDBReadPolicy:
            TableName: !Ref CandidatesTable
        - Statement:
            - Effect: Allow
              Action:
                - cloudwatch:PutMetricData
              Resource: "*"

  CandidatesHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/candidates_handler/
      Handler: app.lambda_handler
      Timeout: 45
      MemorySize: 256
      Environment:
        Variables:
          CANDIDATES_TABLE: !Ref CandidatesTable
          ANALYSES_TABLE: !Ref AnalysesTable
      Events:
        CandidatesApi:
          Type: Api
          Properties:
            RestApiId: !Ref ResumifyApi
            Path: /candidates
            Method: get
        OptionsCandidates:
          Type: Api
          Properties:
            RestApiId: !Ref ResumifyApi
            Path: /candidates
            Method: options
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref CandidatesTable
        - DynamoDBReadPolicy:
            TableName: !Ref AnalysesTable
        - Statement:
            - Effect: Allow
              Action:
                - cloudwatch:PutMetricData
              Resource: "*"

  ### SNS Topic for Textract ###
  TextractTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "resumify-textract-${Environment}"

  ### Layers ###
  AntiwordLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub "antiword-layer-${Environment}"
      Description: Layer containing antiword binary for DOC file processing
      ContentUri: layers/antiword/
      CompatibleRuntimes:
        - python3.10
      RetentionPolicy: Retain

Outputs:
  ResumifyApiUrl:
    Description: "API Gateway endpoint URL for ap-south-1"
    Value: !Sub "https://${ResumifyApi}.execute-api.ap-south-1.amazonaws.com/${Environment}/"
    Export:
      Name: !Sub "${AWS::StackName}-ApiUrl"
  
  ResumesBucketName:
    Description: "S3 bucket for resumes in ap-south-1"
    Value: !Ref ResumesBucket
    Export:
      Name: !Sub "${AWS::StackName}-ResumesBucket"
  
  TextractTopicArn:
    Description: "SNS Topic ARN for Textract notifications"
    Value: !Ref TextractTopic
    Export:
      Name: !Sub "${AWS::StackName}-TextractTopic"
